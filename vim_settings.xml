<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/web/DfTaskDefController.java" timestamp="1585901930482">
        <mark key="[" line="72" column="16" />
        <mark key="]" line="75" column="44" />
        <mark key="." line="75" column="44" />
        <mark key="^" line="75" column="44" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/resources/application-local.properties" timestamp="1586740983064">
        <mark key="[" line="17" column="54" />
        <mark key="]" line="9" column="14" />
        <mark key="." line="9" column="0" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/config/ApplicationRunnerImpl.java" timestamp="1586226328890">
        <mark key="[" line="45" column="16" />
        <mark key="]" line="45" column="16" />
        <mark key="." line="45" column="16" />
      </file>
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/entity/BusinessInfo.java" timestamp="1586499280377" />
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/web/DistributionTaskController.java" timestamp="1586415094834">
        <mark key="[" line="87" column="64" />
        <mark key="]" line="91" column="17" />
        <mark key="^" line="66" column="0" />
        <mark key="." line="91" column="17" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/web/OverAllFlowController.java" timestamp="1586417685597">
        <mark key="[" line="67" column="0" />
        <mark key="]" line="67" column="0" />
        <mark key="." line="67" column="0" />
      </file>
      <file name="$USER_HOME$/data/code/datafill-web/src/pages/Collect/DistributionDataFillTask.js" timestamp="1586509946188">
        <mark key="[" line="388" column="49" />
        <mark key="]" line="767" column="9" />
        <mark key="." line="767" column="9" />
        <mark key="^" line="767" column="20" />
      </file>
      <file name="$USER_HOME$/data/code/flowable-web/src/models/task.js" timestamp="1586315397345" />
      <file name="$USER_HOME$/data/code/datafill-web/src/components/Panel/TablePanel.js" timestamp="1586509338043" />
      <file name="$USER_HOME$/data/code/datafill-web/src/pages/Collect/DeptUserAudit.js" timestamp="1586746945989" />
      <file name="$USER_HOME$/data/code/datafill-web/src/pages/Design/DefConfigModal.js" timestamp="1585906888030">
        <mark key="[" line="2" column="33" />
        <mark key="]" line="2" column="33" />
        <mark key="." line="2" column="33" />
        <mark key="^" line="6" column="0" />
      </file>
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/resources/服务任务.bpmn20.xml" timestamp="1586328275760" />
      <file name="$USER_HOME$/data/code/datafill-web/src/pages/Collect/AllDataFillTask.js" timestamp="1586746780735">
        <mark key="[" line="981" column="19" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/web/DeptUserTaskController.java" timestamp="1586342248324" />
      <file name="$MAVEN_REPOSITORY$/com/yunzainfo/cloud/common/1.0.1-SNAPSHOT/common-1.0.1-20200331.051551-50.jar!/com/yunzainfo/cloud/common/config/CORSConfiguration.class" timestamp="1586420213302" />
      <file name="$USER_HOME$/data/code/flowable-web/config/router.config.js" timestamp="1586315385322" />
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/service/impl/DfTaskServiceImpl.java" timestamp="1586410601518" />
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/mapper/UserMapper.java" timestamp="1586396174693">
        <mark key="[" line="24" column="23" />
        <mark key="]" line="46" column="0" />
        <mark key="." line="46" column="0" />
      </file>
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/resources/mapper/TaskDao.xml" timestamp="1574318903028">
        <mark key="[" line="48" column="43" />
        <mark key="]" line="48" column="50" />
        <mark key="." line="48" column="50" />
        <mark key="^" line="48" column="50" />
      </file>
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/service/impl/ProcessServiceImpl.java" timestamp="1586747427901">
        <mark key="'" line="1055" column="17" />
        <mark key="[" line="1120" column="57" />
        <mark key="]" line="1120" column="56" />
        <mark key="." line="1120" column="56" />
        <mark key="^" line="1120" column="56" />
      </file>
      <file name="$USER_HOME$/data/code/datafill-web/node_modules/react-jsonschema-form/lib/types.js" timestamp="1586336552869" />
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/config/ResourceServerConfig.java" timestamp="1586509279172">
        <mark key="[" line="57" column="31" />
      </file>
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/test/java/com/yunzainfo/cloud/flowable/test/FormServiceTest.java" timestamp="1586333120224">
        <mark key="[" line="42" column="106" />
        <mark key="]" line="41" column="22" />
        <mark key="." line="41" column="22" />
        <mark key="^" line="41" column="22" />
      </file>
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/listener/globel/ActivityCompleteListener.java" timestamp="1586502141179">
        <mark key="'" line="294" column="20" />
        <mark key="[" line="255" column="40" />
        <mark key="]" line="255" column="40" />
        <mark key="." line="255" column="40" />
        <mark key="^" line="243" column="37" />
      </file>
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/config/ProcessEngineConfig.java" timestamp="1586333147569" />
      <file name="$USER_HOME$/data/code/datafill-web/src/pages/Collect/TaskInfo.js" timestamp="1586745597241">
        <mark key="[" line="254" column="14" />
        <mark key="]" line="268" column="44" />
        <mark key="." line="268" column="44" />
        <mark key="^" line="268" column="44" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/web/DeptauditSummaryController.java" timestamp="1586342295425" />
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/repository/DfTaskAuthConfigRepository.java" timestamp="1585907276580">
        <mark key="[" line="18" column="27" />
        <mark key="]" line="18" column="40" />
        <mark key="." line="18" column="40" />
        <mark key="^" line="18" column="40" />
      </file>
      <file name="$USER_HOME$/data/code/datafill-web/src/pages/FormBuilder/views/DataFillFormView.jsx" timestamp="1586336620246">
        <mark key="[" line="26" column="44" />
      </file>
      <file name="$USER_HOME$/data/code/datafill-web/config/router.config.js" timestamp="1586744023991">
        <mark key="[" line="28" column="27" />
      </file>
      <file name="$MAVEN_REPOSITORY$/org/flowable/flowable-engine/6.4.1/flowable-engine-6.4.1-sources.jar!/org/flowable/engine/ProcessEngineConfiguration.java" timestamp="1586333063854" />
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/web/ProcessController.java" timestamp="1586498783585">
        <mark key="[" line="496" column="9" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/entity/DfTaskDef.java" timestamp="1585903085116">
        <mark key="[" line="42" column="7" />
        <mark key="]" line="67" column="14" />
        <mark key="." line="67" column="0" />
        <mark key="^" line="65" column="13" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/test/java/Test.java" timestamp="1586508346254">
        <mark key="[" line="16" column="0" />
        <mark key="]" line="16" column="0" />
        <mark key="." line="16" column="0" />
        <mark key="^" line="16" column="0" />
      </file>
      <file name="$USER_HOME$/data/code/wj-web/src/utils/Path.js" timestamp="1586426588083" />
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/listener/globel/TaskCreateListener.java" timestamp="1586486110440">
        <mark key="'" line="222" column="8" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/resources/mapper/DeptAuditMapper.xml" timestamp="1586404469765">
        <mark key="[" line="24" column="63" />
        <mark key="]" line="24" column="63" />
        <mark key="." line="24" column="63" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/entity/DfTaskDefAuthConfig.java" timestamp="1586223568557" />
      <file name="$USER_HOME$/data/code/datafill-web/src/pages/Design/DataFillDef.js" timestamp="1585909754572">
        <mark key="[" line="0" column="30" />
        <mark key="]" line="508" column="32" />
        <mark key="." line="508" column="32" />
        <mark key="^" line="508" column="32" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/pojo/DeptUserPojo.java" timestamp="1586226370898">
        <mark key="[" line="21" column="19" />
        <mark key="]" line="21" column="19" />
        <mark key="." line="21" column="19" />
      </file>
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/cache/CustomDeploymentCache.java" timestamp="1586307942032" />
      <file name="$USER_HOME$/data/code/conversion/pom.xml" timestamp="1586255842492">
        <mark key="[" line="156" column="4" />
        <mark key="]" line="156" column="4" />
        <mark key="." line="156" column="4" />
        <mark key="^" line="156" column="0" />
      </file>
      <file name="$MAVEN_REPOSITORY$/org/flowable/flowable-engine-common/6.4.1/flowable-engine-common-6.4.1.jar!/org/flowable/common/engine/impl/persistence/deploy/DefaultDeploymentCache.class" timestamp="1586307812838" />
      <file name="$USER_HOME$/data/code/flowable-lwj/flowable-manager-ui/src/pages/leave/leaveList.tsx" timestamp="1574336348672">
        <mark key="[" line="42" column="90" />
        <mark key="]" line="42" column="89" />
        <mark key="." line="42" column="89" />
        <mark key="^" line="42" column="89" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/service/DfTaskService.java" timestamp="1586328652260">
        <mark key="[" line="33" column="43" />
      </file>
      <file name="$USER_HOME$/data/code/conversion/src/test/java/Exc.java" timestamp="1586261979998">
        <mark key="[" line="159" column="12" />
        <mark key="]" line="159" column="12" />
        <mark key="." line="159" column="12" />
        <mark key="^" line="144" column="95" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/util/DfUtil.java" timestamp="1586226479260" />
      <file name="$USER_HOME$/data/code/datafill-web/src/models/dftask.js" timestamp="1586250919453">
        <mark key="[" line="175" column="10" />
      </file>
      <file name="$MAVEN_REPOSITORY$/org/flowable/flowable-engine/6.4.1/flowable-engine-6.4.1-sources.jar!/org/flowable/engine/impl/cfg/ProcessEngineConfigurationImpl.java" timestamp="1586333031233" />
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/istio/istio-svc-dpt.yaml" timestamp="1586499454080">
        <mark key="[" line="40" column="24" />
      </file>
      <file name="$USER_HOME$/data/code/datafill-web/src/utils/Path.js" timestamp="1586743765353">
        <mark key="[" line="9" column="58" />
        <mark key="]" line="2" column="57" />
        <mark key="^" line="2" column="57" />
        <mark key="." line="2" column="57" />
      </file>
      <file name="$USER_HOME$/data/code/cloud/auth-center/src/main/java/com/yunzainfo/cloud/auth/service/impl/BaseMenuServiceImpl.java" timestamp="1586248244450" />
      <file name="$USER_HOME$/data/code/datafill-web/src/pages/Collect/DeptUserTaskFormModal.js" timestamp="1586336608525">
        <mark key="[" line="56" column="25" />
      </file>
      <file name="/Dummy.txt" timestamp="1586504092718">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/web/DfTaskController.java" timestamp="1586258542201">
        <mark key="[" line="225" column="49" />
        <mark key="]" line="225" column="49" />
        <mark key="." line="225" column="49" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/mapper/TaskInfoMapper.java" timestamp="1586396007930">
        <mark key="[" line="66" column="51" />
        <mark key="]" line="66" column="51" />
        <mark key="." line="66" column="51" />
      </file>
      <file name="/ProcessServiceImpl.java" timestamp="1586314707868" />
      <file name="$USER_HOME$/data/code/datafill-web/src/services/system/dftask.js" timestamp="1586250877376">
        <mark key="[" line="11" column="30" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/pom.xml" timestamp="1586313682885" />
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/pojo/BusinessInfoPojo.java" timestamp="1586498404711" />
      <file name="$USER_HOME$/data/code/conversion/src/test/java/MapImportHandler.java" timestamp="1586262334570">
        <mark key="[" line="57" column="22" />
        <mark key="]" line="57" column="22" />
        <mark key="." line="57" column="22" />
        <mark key="^" line="62" column="6" />
      </file>
      <file name="$USER_HOME$/data/code/conversion/src/main/java/com/yunzainfo/cloud/conversion/entity/CvsApi.java" timestamp="1586339895028" />
      <file name="$USER_HOME$/data/code/wj-web/src/services/AuthService.js" timestamp="1586426524479" />
      <file name="$USER_HOME$/data/code/datafill/src/main/resources/mapper/TaskInfo.xml" timestamp="1586396026003">
        <mark key="'" line="109" column="7" />
        <mark key="[" line="22" column="108" />
        <mark key="]" line="276" column="16" />
        <mark key="." line="276" column="16" />
        <mark key="^" line="109" column="7" />
      </file>
      <file name="$USER_HOME$/data/code/datafill/src/test/java/Exc.java" timestamp="1586254215749">
        <mark key="[" line="23" column="39" />
        <mark key="]" line="23" column="39" />
        <mark key="." line="23" column="39" />
      </file>
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/ServerTaskClass.java" timestamp="1586330087901" />
      <file name="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/service/impl/FormBusinessServiceImpl.java" timestamp="1586331239829" />
      <file name="$USER_HOME$/data/code/datafill-web/src/pages/Collect/DataFillTask.js" timestamp="1586746762592">
        <mark key="[" line="1114" column="19" />
      </file>
      <file name="$USER_HOME$/data/code/flowable-web/src/pages/FormBuilder/ProcessForm.jsx" timestamp="1586245139953" />
      <file name="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/util/ExcelUtil.java" timestamp="1586258694591" />
      <file name="$USER_HOME$/data/code/datafill-web/src/pages/Collect/DeptUserTask.js" timestamp="1586336561294">
        <mark key="[" line="641" column="8" />
        <mark key="]" line="641" column="8" />
        <mark key="." line="641" column="8" />
      </file>
      <file name="$USER_HOME$/data/code/pitcher-piano/src/main/java/com/yunzainfo/cloud/pitcher/piano/service/impl/BuildServiceImpl.java" timestamp="1586339087875" />
    </filemarks>
    <jumps>
      <jump line="347" column="8" filename="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/web/ProcessController.java" />
      <jump line="11" column="1" filename="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/repository/FormBusinessMapRepository.java" />
      <jump line="320" column="31" filename="$USER_HOME$/data/code/flowable-web/src/pages/Flow/FormBusiness.js" />
      <jump line="295" column="17" filename="$USER_HOME$/data/code/flowable-web/src/pages/FormBuilder/ProcessForm.jsx" />
      <jump line="70" column="59" filename="$USER_HOME$/data/code/flowable-web/src/pages/FormBuilder/rjsf-patch/widgets/OfficialDocument.js" />
      <jump line="100" column="13" filename="$USER_HOME$/data/code/datafill/src/main/java/com/yunzainfo/cloud/datafill/service/impl/DfTaskDefServiceImpl.java" />
      <jump line="109" column="7" filename="$USER_HOME$/data/code/datafill/src/main/resources/mapper/TaskInfo.xml" />
      <jump line="20" column="50" filename="$USER_HOME$/data/code/conversion/src/test/java/Exc.java" />
      <jump line="222" column="8" filename="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/listener/globel/TaskCreateListener.java" />
      <jump line="288" column="20" filename="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/listener/globel/ActivityCompleteListener.java" />
      <jump line="1055" column="17" filename="$USER_HOME$/data/code/flowable-engine/flowable/src/main/java/com/yunzainfo/cloud/flowable/service/impl/ProcessServiceImpl.java" />
    </jumps>
    <registers>
      <register name="0" type="4">
        <text>分配权限的填报任务</text>
      </register>
      <register name="1" type="4">
        <text>}else{

                }</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIAo=</text>
      </register>
      <register name="3" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICAgICAgICAgCg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAgICBhbmQgdXNlcl9pZCBpbiAoc2VsZWN0IHVzZXJfaWQgYXMgaWQgZnJvbSBzcGF1dGgudl90ZWFjaGVyX2Jhc2UgdW5pb24gKCBzZWxlY3Qgc3R1ZGVudF9pZCBhcyBpZCBmcm9tCiAgICAgICAgc3BhdXRoLnZfc3R1ZGVudF9iYXNlKSkK</text>
      </register>
      <register name="8" type="4">
        <text encoding="base64">PERlcHRVc2VyVGFza0F1ZGl0TW9kYWwKICAgICAgICAgIGxvYWRpbmc9e3RoaXMucHJvcHMubG9hZGluZ30KICAgICAgICAgIG1vZGFsVmlzaWJsZT17dGhpcy5zdGF0ZS5tb2RhbFZpc2libGV9CiAgICAgICAgICBoYW5kbGVNb2RhbFZpc2libGU9e3RoaXMuaGFuZGxlTW9kYWxWaXNpYmxlfQogICAgICAgICAgdHlwZT17NH0KICAgICAgICAgIHRpdGxlPXt0aGlzLnN0YXRlLmF1ZGl0VGl0bGV9CiAgICAgICAgLz4=</text>
      </register>
      <register name="9" type="4">
        <text>if(!objects.contains((String)xm)){
                
            }</text>
      </register>
      <register name=":" type="4">
        <text>q</text>
      </register>
      <register name="-" type="4">
        <text>{getFieldDecorator('name')(</text>
      </register>
    </registers>
    <search>
      <last-dir>0</last-dir>
      <show-last>true</show-last>
    </search>
    <history>
      <history-search />
      <history-cmd>
        <entry>action Find</entry>
        <entry>wq</entry>
        <entry>q</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed L</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>